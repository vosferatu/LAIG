/**
 * MyTriangle
 * @param gl {WebGLRenderingContext}
 * @constructor
 */
function MyTriangle(scene, x1, y1, z1, x2, y2, z2, x3, y3, z3, minS=0, maxS=1, minT=0, maxT=1) {
	CGFobject.call(this,scene);

    this.x1 = x1;
    this.x2 = x2;
    this.x3 = x3;
    this.y1 = y1;
    this.y2 = y2;
    this.y3 = y3;
    this.z1 = z1;
    this.z2 = z2;
    this.z3 = z3;
	this.minS = minS;
	this.maxS = maxS;
	this.minT = minT;
	this.maxT = maxT;

	this.initBuffers();
};

MyTriangle.prototype = Object.create(CGFobject.prototype);
MyTriangle.prototype.constructor=MyTriangle;

MyTriangle.prototype.initBuffers = function () {
	this.vertices = [
            this.x1, this.y1, this.z1,	//inferior esquerdo
            this.x2, this.y2, this.z2,	//inferior direito
            this.x3, this.y3, this.z3	//superior esquerdo
			];

	this.indices = [
      0, 1, 2
  ];

	var nx = (this.y2-this.y1)*(this.z3-this.z1) - (this.z2-this.z1)*(this.y3-this.y1);
	var ny = (this.z2-this.z1)*(this.x3-this.x1) - (this.x2-this.x1)*(this.z3-this.z1);
	var nz = (this.x2-this.x1)*(this.y3-this.y1) - (this.y2-this.y1)*(this.x3-this.x1);

    this.normals = [
    nx, ny, nz,
    nx, ny, nz,
    nx, ny, nz
	];

	var ac = Math.sqrt(Math.pow(this.x1-this.x3, 2) + Math.pow(this.y1-this.y3, 2) + Math.pow(this.x1-this.z3, 2));
	var ab = Math.sqrt(Math.pow(this.x2-this.x1, 2) + Math.pow(this.y2-this.y1, 2) + Math.pow(this.z2-this.z1, 2));
    var bc = Math.sqrt(Math.pow(this.x2-this.x3, 2) + Math.pow(this.y2-this.y3, 2) + Math.pow(this.z2-this.z3, 2));
    var ang = Math.acos((Math.pow(bc, 2) + Math.pow(ab, 2) - Math.pow(ac, 2))/(2*ab*bc));
    
    this.texCoords = [
		this.minS, this.minT,
		this.maxS, this.minT,
		(ab - bc*Math.cos(ang))/ab, (bc*Math.sin(ang)/ab)
    ];


	this.primitiveType=this.scene.gl.TRIANGLES;
	this.initGLBuffers();
};

MyTriangle.prototype.amplify = function (ampS, ampT){

	/*var ac = Math.sqrt(Math.pow(this.x1-this.x3, 2) + Math.pow(this.y1-this.y3, 2) + Math.pow(this.x1-this.z3, 2));
	var ab = Math.sqrt(Math.pow(this.x2-this.x1, 2) + Math.pow(this.y2-this.y1, 2) + Math.pow(this.z2-this.z1, 2));
    var bc = Math.sqrt(Math.pow(this.x2-this.x3, 2) + Math.pow(this.y2-this.y3, 2) + Math.pow(this.z2-this.z3, 2));
    var ang = Math.acos((Math.pow(bc, 2) + Math.pow(ab, 2) - Math.pow(ac, 2))/(2*ab*bc));
    
    this.texCoords = [
		this.minS, this.minT,
		this.maxS, this.minT*ab/ampS,
		((ab - bc*Math.cos(ang))/ab)*ab/ampS, (bc*Math.sin(ang)/ab)*ab/ampT
    ];	*/

    for (var i = 0; i < this.texCoords.length; i += 2) {
    	console.log("text\n");
		this.texCoords[i] = this.texCoords[i] / ampS;
		this.texCoords[i + 1] = this.texCoords[i + 1] / ampT;
}
	
	this.updateTexCoordsGLBuffers();

}
